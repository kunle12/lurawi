"""
This script runs the Lurawi Agent Visual Programming Editor.

It provides functionalities to:
- Parse custom Python scripts to extract custom function definitions.
- Update the visual editor's HTML with these custom definitions.
- Convert Markdown documentation files to HTML.
- Serve the visual editor and its documentation via a local HTTP server.
"""
#!/usr/bin/env python3

import argparse
import ast
import http.server
import socketserver
import os
import sys
import webbrowser
import shutil

from markdown_it import MarkdownIt
from bs4 import BeautifulSoup

DOC_CSS = """
body { background-color: #272822; color: #e6edf3; font-family: -apple-system,BlinkMacSystemFont,"Segoe UI","Noto Sans",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji"; position: relative; max-width: 960px; margin: auto; line-height: 1.5; }
a[href] { color: #66d9ef; }
code { color: #e6edf3; background-color: #343941; font-family: monospace; padding: .2em .4em; border-radius: 6px; }
pre { padding: 1em; border-radius: 6px; background-color: #161b22; overflow-x:auto; }
pre > code { background-color: #161b22; padding: 0px 0px; }
table, th, td { border: 1px solid; border-collapse: collapse; padding-left: 4px; padding-right: 4px; }
img { max-width: 100%; }
"""


def parse_custom_scripts(fdir: str):
    """
    Parses custom Python scripts in the specified directory to extract custom script information.

    Args:
        fdir (str): The directory containing the custom scripts.

    Returns:
        str: An XML-formatted string containing the extracted custom script definitions.
    """
    content = ""
    dumbhead_str = f"dumb|{fdir}"  # keep snyk happy
    for root, _, files in os.walk(dumbhead_str.split("|")[1], topdown=False):
        for name in files:
            if name.endswith(".py") and name != "__init__.py":
                # print("processing custom script {}".format(name))
                content = content + extract_example_info(os.path.join(root, name))
    return content


def extract_example_info(fname: str):
    """
    Extracts example information from a Python file's docstrings, specifically looking for
    classes with a '"custom"' tag and associated arguments.

    Args:
        fname (str): The path to the Python file.

    Returns:
        str: An XML-formatted string representing the custom script and its arguments,
             or an empty string if no relevant information is found or parsing fails.
    """
    content = ""
    if not os.path.isfile(fname):
        return content
    with open(fname, "r", encoding='utf-8') as f:
        tree = ast.parse(f.read())

        modef = tuple({ast.ClassDef: "Class"})
        for n in ast.walk(tree):
            if isinstance(n, modef):
                ds = ast.get_docstring(n)
                # print("extracted class docstring {}".format(ds))
                if ds is None:
                    continue
                cindex = ds.find('"custom"')
                if cindex > 0:
                    exstr = ds[ds.rfind("[", 0, cindex) :]
                    eindex = exstr.rfind("]", 0, len(exstr))
                    if eindex <= 0:
                        print(f"unable to parse doc string example 1: {exstr}")
                        continue
                    exstr = exstr[: eindex + 1]
                    try:
                        exalet = ast.literal_eval(exstr)
                    except Exception as _:
                        print(f"unable to parse doc string example 2: {exstr}")
                        continue

                    if not isinstance(exalet, list) or len(exalet) != 2:
                        print(f"unable to parse the example 3: {exalet}")
                        continue
                    if isinstance(exalet[1], dict):
                        # print("custom script {} with".format(exalet[1]['name']))
                        content = (
                            content + f"    <cscript name=\"{exalet[1]['name']}\">\n"
                        )
                        kargs = exalet[1]["args"]
                        for k, t in kargs.items():
                            atype = "any"
                            if isinstance(t, bool):
                                atype = "boolean"
                            elif isinstance(t, str):
                                atype = "string"
                            elif isinstance(t, float) or isinstance(t, int):
                                atype = "number"
                            elif isinstance(t, list) and (
                                "action" in k or "command" in k
                            ):
                                atype = "action"
                            content = (
                                content
                                + f'      <argument type="{atype}">{k}</argument>\n'
                            )
                        content = content + "    </cscript>\n"
                    elif isinstance(exalet[1], str):
                        # print("custom script: {} no arg".format(exalet[1]))
                        content = (
                            content + f'    <cscript name="{exalet[1]}"></cscript>\n'
                        )
                    else:
                        print(f"unable to parse doc string example 4: {exstr}")
                        continue
                else:
                    continue
    return content


def update_documentation(editor_dir: str):
    """
    Updates the documentation by converting Markdown files to HTML and copying assets.

    Args:
        editor_dir (str): The directory where the visual editor is located.
    """

    def markdown_to_html(in_file_path: str, out_file_path: str) -> bool:
        """
        Converts a Markdown file to an HTML file, applying custom CSS and syntax highlighting.

        Args:
            in_file_path (str): The path to the input Markdown file.
            out_file_path (str): The path to the output HTML file.

        Returns:
            bool: True if the conversion was successful, False otherwise.
        """
        try:
            with open(in_file_path, "r", encoding='utf-8') as ifile, open(out_file_path, "w", encoding='utf-8') as ofile:
                text = ifile.read()
                html_text = mark_down_it_obj.render(text)
                # pretty CSS
                soup = BeautifulSoup(
                    html_text, "html5lib"
                )  # adds <html>, <head>,  <body>
                soup.select_one("head").append(soup.new_tag("meta"))
                soup.select_one("meta").attrs["charset"] = "UTF-8"

                # syntax highlighting
                soup.select_one("head").append(soup.new_tag("link"))
                soup.select_one("link").attrs["rel"] = "stylesheet"
                soup.select_one("link").attrs["href"] = "../assets/monokai.min.css"

                soup.select_one("head").append(soup.new_tag("script"))
                soup.select("script")[0].attrs["src"] = "../assets/highlight.min.js"
                soup.select_one("head").append(soup.new_tag("script"))
                soup.select("script")[1].string = "hljs.highlightAll();"

                soup.select_one("head").append(soup.new_tag("style"))
                soup.select_one("style").string = DOC_CSS
                outtext = str(soup).replace(".md", ".html")
                outtext = outtext.replace("docs/", "")
                ofile.write(outtext)
        except Exception as err:
            print(f"Failed to generate html for {in_file_path}: {err}")
            return False
        return True

    html_doc_path = f"{editor_dir}/doc_html"
    doc_path = f"{os.path.dirname(editor_dir)}/docs"
    if os.path.exists(html_doc_path):
        return

    os.mkdir(html_doc_path)
    mark_down_it_obj = MarkdownIt("gfm-like").enable("table").enable("strikethrough")
    markdown_to_html(
        in_file_path="README.md", out_file_path=f"{html_doc_path}/index.html"
    )
    for file in os.listdir(doc_path):
        file_path = f"{doc_path}/{file}"
        if os.path.isdir(file_path):
            shutil.copytree(src=file_path, dst=f"{html_doc_path}/{file}")
        elif file.endswith(".md"):
            markdown_to_html(
                in_file_path=file_path,
                out_file_path=f"{html_doc_path}/{file[:-3]}.html",
            )
        else:
            shutil.copy(src=file_path, dst=f"{html_doc_path}/{file}")


def update_editor_custom_definitions(custom_dir: str, editor_dir: str) -> bool:
    """
    Updates the visual editor's index.html with custom function definitions extracted from
    Python scripts.

    Args:
        custom_dir (str): The directory containing custom Python scripts.
        editor_dir (str): The directory where the visual editor's files are located.

    Returns:
        bool: True if the update was successful or not needed, False if the index file
              is not found or an error occurs during update.
    """
    index_file = f"{editor_dir}/index.html"
    if not os.path.exists(index_file):
        return False

    content = parse_custom_scripts(custom_dir)
    if content:
        index_content = ""
        try:
            with open(index_file, "r", encoding='utf-8') as f:
                reached_comment = False
                for line in f.readlines():
                    if reached_comment:
                        break
                    else:
                        index_content += line
                        reached_comment = "DO NOT DELETE THIS LINE" in line
            with open(index_file, "w", encoding='utf-8') as f:
                f.write(index_content)
                f.write(
                    '  <xml xmlns="http://www.w3.org/1999/xhtml" id="scriptlib" style="display: none;">\n'
                )
                f.write(content)
                f.write("  </xml>\n  </body>\n</html>\n")
        except Exception as err:
            print(
                f"unable to update custom function definitions in visual editor: {err}"
            )
    else:
        print("unable to find custom function definitions")

    return True


def handler_from(directory):
    """
    Creates a custom HTTP request handler that serves files from a specified directory.

    Args:
        directory (str): The directory to serve files from.

    Returns:
        type: A new class inheriting from http.server.SimpleHTTPRequestHandler,
              configured to serve from the given directory.
    """

    def _init(self, *args, **kwargs):
        """
        Initializes the SimpleHTTPRequestHandler with the specified directory.
        """
        return http.server.SimpleHTTPRequestHandler.__init__(
            self, *args, directory=self.directory, **kwargs
        )

    return type(
        f"HandlerFrom<{directory}>",
        (http.server.SimpleHTTPRequestHandler,),
        {"__init__": _init, "directory": directory},
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Run Lurawi Agent Visual Programming Editor"
    )
    parser.add_argument("--custom_dir", nargs=1, help="path to the custom functions")
    parser.add_argument("--editor_dir", nargs=1, help="path to the visual editor")
    args = parser.parse_args()

    script_path = os.path.realpath(__file__)
    base_path = os.path.dirname(os.path.dirname(script_path))

    custom_dir = f"{base_path}/lurawi/custom"
    editor_dir = f"{base_path}/visualeditor"

    if args.custom_dir:
        custom_dir = os.path.normpath(args.custom_dir[0])
    if args.editor_dir:
        editor_dir = os.path.normpath(args.editor_dir[0])

    if not os.path.exists(custom_dir) or not os.path.isdir(custom_dir):
        print(f"Visual Editor invalid custom path {custom_dir}")
        sys.exit(-1)

    if not update_editor_custom_definitions(
        custom_dir=custom_dir, editor_dir=editor_dir
    ):
        print("Visual Editor is not found")
        sys.exit(-1)

    update_documentation(editor_dir=editor_dir)

    port = int(os.getenv("EDITOR_PORT", "3031"))
    host = os.getenv("HOST", "localhost")

    with socketserver.TCPServer((host, port), handler_from(editor_dir)) as httpd:
        print("serving at port", port)
        if host == "localhost":
            webbrowser.open(f"http://localhost:{port}")
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("exiting...")
            httpd.server_close()
