#!/usr/bin/env python3

"""
This script provides a command-line interface (CLI) for managing the Lurawi application.
It supports various commands such as running the service, starting a development environment,
managing custom functions, creating new projects, and checking the application version.
"""

import argparse
import os
import shutil
import subprocess
import sys
from venv import EnvBuilder
from typing import Dict
from version import VERSION

## Calling example
# lurawi run # run service
# lurawi dev # run development environment
# lurawi custom list
# lurawi custom new new_custom_function
# lurawi project new new_project

REQUIRED_ENVIRONMENT_VARIABLES = ["PROJECT_NAME", "PROJECT_ACCESS_KEY"]

CUSTOM_FUNCTION_TEMPLATE = '''
from lurawi.custom_behaviour import CustomBehaviour
from lurawi.utils import logger

class {{function_template}}(CustomBehaviour):
    """!@brief a function template that takes in a list of items and output a string.
    Example:
    ["custom", { "name": "{{function_template}}",
                 "args": {
                            "list": ["item1", "item2"],
                            "output": "variable_output"
                          }
                }
    ]
    """

    def __init__(self, kb, details):
        super().__init__(kb, details)

    async def run(self):
        data_list = self.parse_simple_input(key="list", check_for_type="list")

        if data_list is None or len(data_list) == 0:
            logger.error("{{function_template}}: 'list' expected to be a non-empty list or a list variable. Got %s. Aborting",
                self.details)
            await self.failed()
            return

        output = self.parse_simple_input(key="output", check_for_type="str")

        if output is None:
            logger.error("{{function_template}}: 'output' (str) must be a variable name Got %s. Aborting", self.details)
            await self.failed()
            return
        
        # TODO: do some processing here

        self.kb[output] = "someoutput"
'''


def _create_activate_working_environment(path: str) -> Dict:
    venv_dir = f"{path}/.venv"
    new_venv_env = os.environ.copy()
    if os.path.isdir(venv_dir):
        print("activating working environment...")
        new_venv_env["VIRTUAL_ENV"] = venv_dir
        new_venv_env["PATH"] = f"{venv_dir}/bin:{new_venv_env['PATH']}"
    else:  # create working environment
        print("create working environment...")
        env_builder = EnvBuilder(
            with_pip=True, system_site_packages=True, symlinks=True
        )
        env_builder.create(venv_dir)
        new_venv_env["VIRTUAL_ENV"] = venv_dir
        new_venv_env["PATH"] = f"{venv_dir}/bin:{new_venv_env['PATH']}"
        try:
            subprocess.run(
                "pip install -r requirements.txt", env=new_venv_env, check=True, shell=True
            )
        except Exception as err:
            print(f"failed to install dependencies in the environment: {err}")
    return new_venv_env


def _check_custom_links(path: str):
    # make sure all local customs have been properly linked
    if path.startswith("/opt/defaultsite") and os.path.exists("/home/lurawi/custom"):
        for custom_root, _, scripts in os.walk("/home/lurawi/custom", topdown=False):
            for custom_name in scripts:
                if custom_name.endswith(".py"):
                    destination_path = f"/opt/defaultsite/lurawi/custom/{custom_name}"
                    if not os.path.exists(destination_path):
                        os.symlink(f"{custom_root}/{custom_name}", dst=destination_path)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Lurawi CLI")
    sub_parsers = parser.add_subparsers(dest="command")
    custom_parser = sub_parsers.add_parser("custom")
    custom_parser.add_argument("subcommand", nargs="*", help="supported {list|new}")

    dev_parser = sub_parsers.add_parser("dev")
    run_parser = sub_parsers.add_parser("run")
    create_parser = sub_parsers.add_parser("create")
    create_parser.add_argument("project", type=str, help="New project name.")
    version_parser = sub_parsers.add_parser("version")

    args = parser.parse_args()

    command = args.command

    missing_variables = [
        variable
        for variable in REQUIRED_ENVIRONMENT_VARIABLES
        if variable not in os.environ
    ]
    if command != "create" and missing_variables:
        print(f"Missing environment variables: {', '.join(missing_variables)}")
        sys.exit(-1)

    script_path = os.path.realpath(__file__)
    base_path = os.path.dirname(os.path.dirname(script_path))
    venv_env = os.environ.copy()

    if not script_path.startswith(
        "/opt/defaultsite"
    ):  # we are NOT running with a prebuilt container
        venv_env = _create_activate_working_environment(base_path)
        venv_env["RemoteWebhookURL"] = "http://localhost:8081"

    if command == "run":
        _check_custom_links(path=script_path)
        print("start lurawi service")
        try:
            subprocess.run(
                f"python {base_path}/app.py --skip-auth --no-ssl-verify",
                env=venv_env,
                shell=True,
                check=False,
            )
        except KeyboardInterrupt:
            pass
    elif command == "dev":
        _check_custom_links(path=script_path)
        print("start lurawi development mode")
        try:
            editor_proc = subprocess.Popen(
                f"{base_path}/bin/run_visual_editor",
                env=venv_env,
                shell=True,
                stderr=subprocess.DEVNULL,
                stdout=subprocess.DEVNULL,
            )
            subprocess.run(
                f"python {base_path}/app.py --skip-auth --no-ssl-verify --dev",
                env=venv_env,
                shell=True,
                check=False,
            )
        except KeyboardInterrupt:
            pass
        editor_proc.kill()
    elif command == "custom":
        subcommand = args.subcommand[0]
        if subcommand == "list":
            print(f"{'Custom Functions':30} Status")
            for root, _, files in os.walk(f"{base_path}/lurawi/custom", topdown=False):
                for name in files:
                    if name.endswith(".py") and name != "__init__.py":
                        FILE_PATH = f"{root}/{name}"
                        print(
                            f"{name[:-3]:30} {'official' if not os.path.islink(FILE_PATH) else ''}"
                        )
        elif subcommand == "new":
            if len(args.subcommand) != 2:
                print("missing new custom function name")
                sys.exit(-1)
            function_name = args.subcommand[1].lower()
            SCRIPT_NAME = f"{function_name}.py"
            for root, _, files in os.walk(f"{base_path}/lurawi/custom", topdown=False):
                for name in files:
                    if name == SCRIPT_NAME:
                        print(f"custom function {function_name} already exists")
                        sys.exit(-1)
            DESTINATION_PATH = f"{base_path}/lurawi/custom/{SCRIPT_NAME}"
            try:
                if script_path.startswith("/opt/defaultsite"):
                    if not os.path.isdir("/home/lurawi/custom"):
                        os.mkdir("/home/lurawi/custom")
                    LOCAL_PATH = f"/home/lurawi/custom/{SCRIPT_NAME}"
                    with open(LOCAL_PATH, "w", encoding='utf-8') as f:
                        OUTPUT = CUSTOM_FUNCTION_TEMPLATE.replace(
                            "{{function_template}}", function_name
                        )
                        f.write(OUTPUT)
                    os.symlink(src=LOCAL_PATH, dst=DESTINATION_PATH)
                else:
                    with open(DESTINATION_PATH, "w", encoding='utf-8') as f:
                        OUTPUT = CUSTOM_FUNCTION_TEMPLATE.replace(
                            "{{function_template}}", function_name
                        )
                        f.write(OUTPUT)
            except Exception as err:
                print(
                    f"Internal error: unable to create custom function {function_name}: {err}"
                )
                sys.exit(-1)
            print(f"Created custom function template for {function_name}")
        else:
            print(f"Unknown custom subcommand {subcommand}")
            sys.exit(-1)
    elif command == "create":
        project_name = args.project.lower()
        try:
            if script_path.startswith("/opt/defaultsite"):
                LOCAL_PATH = f"/home/lurawi/{project_name}.xml"
                if os.path.isfile(LOCAL_PATH):
                    print(
                        f"Unable to create project: project {project_name} already exists"
                    )
                    sys.exit(-1)
                shutil.copyfile(
                    src="/opt/defaultsite/lurawi_example.xml", dst=LOCAL_PATH
                )
                DOCKER_FILE = "/home/lurawi/Dockerfile"
                if not os.path.exists(DOCKER_FILE):
                    shutil.copyfile(
                        src="/opt/defaultsite/Dockerfile.new", dst=DOCKER_FILE
                    )
            else:
                LOCAL_PATH = f"{base_path}/{project_name}.xml"
                shutil.copyfile(src=f"{base_path}/lurawi_example.xml", dst=LOCAL_PATH)
        except Exception as err:
            print(f"Internal error: unable to create new project {project_name}: {err}")
            sys.exit(-1)

        print(f"Created a new project {project_name} from template.")
    elif command == "version":
        print(f"Lurawi version {VERSION}.")
